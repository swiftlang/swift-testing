//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for Swift project authors
//

#if !defined(SWT_FALLBACK_EVENT_HANDLER_H)
#define SWT_FALLBACK_EVENT_HANDLER_H

/// - Important: `_Testing_ExperimentalInfrastructure` is the only target that
///   should directly access the symbols in this file! If another target uses
///   them, it will get its own copy of the fallback event handler instead of
///   using the shared copy. (The alternative is to create a separate C target
///   to hold the atomic variable and accessor functions. This is easier.)

#include "Defines.h"

#if !defined(__cplusplus)
#include <stdatomic.h>
#include <stdbool.h>
#endif

SWT_ASSUME_NONNULL_BEGIN

/// A type describing a fallback event handler to invoke when testing API is
/// used while the testing library is not running.
///
/// - Parameters:
///   - recordJSONSchemaVersionNumber: The JSON schema version used to encode
///     the event record.
///   - recordJSONBaseAddress: A pointer to the first byte of the encoded event.
///   - recordJSONByteCount: The size of the encoded event in bytes.
///   - reserved: Reserved for future use.
typedef void (* SWT_SENDABLE SWTFallbackEventHandler)(
  const char *recordJSONSchemaVersionNumber,
  const void *recordJSONBaseAddress,
  size_t recordJSONByteCount,
  const void *_Nullable reserved
);

#if !defined(__cplusplus)
/// Storage for the fallback event handler.
///
/// When Swift Testing is the active testing library, it calls
/// ``setFallbackEventHandler(_:)`` and passes it this function. Then, if
/// another library such as XCTest posts some event but is _not_ actively
/// running, it can call ``fallbackEventHandler()`` to get this callback and
/// invoke it, allowing Swift Testing to handle the event on its behalf.
///
/// Conversely, If another testing library such as XCTest is active, it can call
/// ``setFallbackEventHandler(_:)`` and receive events generated by Swift
/// Testing API calls such as `#expect()`.
static _Atomic(SWTFallbackEventHandler SWT_SENDABLE) swt_fallbackEventHandler = 0;

static inline SWTFallbackEventHandler SWT_SENDABLE _Nullable swt_loadFallbackEventHandler(void) {
  return atomic_load(&swt_fallbackEventHandler);
}

static inline bool swt_installFallbackEventHandler(SWTFallbackEventHandler SWT_SENDABLE handler) {
  SWTFallbackEventHandler nullHandler = 0;
  return atomic_compare_exchange_strong(&swt_fallbackEventHandler, &nullHandler, handler);
}
#endif

SWT_ASSUME_NONNULL_END

#endif
